---
  # Install grails
  # Create directory where sdkman belongs
  - name: "Create sdkman directory"
    file: path="{{ grails_home }}" state=directory recurse=yes

  # Download sdkman for easy Grails install
  - name: Download sdkman
    shell:
      curl -s get.sdkman.io | bash executable: /bin/bash

  # Install Grails 2.4.5
  # This is the version required by Web Apollo
  - name: "Install grails version 2.4.5"
    shell: "source {{ grails_home }}/sdkman-init.sh && yes | sdk install grails {{ grails_version }}"
    args:
        executable: /bin/bash

  # Install tomcat, ant, and tomcat7-admin (just in case we need admin console)
  - name: "Install Tomcat and Ant"
    apt: pkg={{ item }} state=installed
    with_items:
        - tomcat7
        - tomcat7-admin
        - ant
    become: yes

  # Set environment variables inside profile and bashrc files
  # This probably isn't needed, but just in case
  - name: "Setting environment variables"
    become: yes
    lineinfile: dest="{{ item[0] }}" line="{{ item[1] }}" state=present
    with_nested:
      - ["/home/ubuntu/.bashrc", "/home/ubuntu/.profile", "/root/.bashrc", "/root/.profile", "/home/researcher/.bashrc", "/home/researcher/.profile"]
      - ["export TOMCAT_HOME=/var/lib/tomcat7/",
         "export CATALINA_HOME=/usr/share/tomcat7",
         "export CATALINA_BASE=/var/lib/tomcat7",
         "export PATH=$JAVA_HOME/bin:$PATH"]

  # Set environment variables - source bashrc
  - name: "Source ~/.bashrc"
    shell: source /home/ubuntu/.bashrc
    args:
      executable: /bin/bash

  # Increase memory for tomcat7
  # This is a requirement for Web Apollo, or it will crash
  - name: "Increase memory for tomcat"
    copy: src="setenv.sh" dest="/usr/share/tomcat7" owner=ubuntu mode=0755
    become: yes

  # Install Web Apollo by cloning git repo
  # Version defined in defaults/main.yml
  - name: "Install apollo"
    git: repo=https://github.com/GMOD/Apollo.git dest={{ apollo_home }} version={{ apollo_version }}

  # Copy the postgres config files for Apollo
  - name: "Copy postgres config files"
    template: src="apollo-config.groovy.j2" dest="{{ apollo_home }}/apollo-config.groovy" owner=ubuntu mode=0600

  # Create a new database user, database_user
  - name: "Create the database postgres user"
    command: sudo -u postgres bash -c "psql -c \"CREATE USER {{ database_user }} WITH PASSWORD '{{ database_pass }}';\""
    ignore_errors: yes
    args:
      chdir: "{{ apollo_home }}"

  - name: "Create database directory"
    file: path="{{ apollo_home }}/db" state=directory owner=postgres

  - name: "Make postgres aware of the new database location"
    command: sudo -u postgres bash -c "psql -c \"CREATE TABLESPACE gvl LOCATION '{{ apollo_home }}/db/'\""
    ignore_errors: yes
    args:
      chdir: "{{ apollo_home }}"

  # Create the production database, apollo-production
  - name: "Create database"
    command: sudo su postgres -c "createdb -E UTF-8 -D gvl -O {{ database_user }} {{ database_prod }}"
    ignore_errors: yes
    args:
      chdir: "{{ apollo_home }}"

  # Create the production database, apollo-production
  - name: "Create database"
    command: sudo su postgres -c "createdb -E UTF-8 -D gvl -O {{ database_user }} {{ database_prod_chado }}"
    ignore_errors: yes
    args:
      chdir: "{{ apollo_home }}"

  # Apollo config is finished- run apollo deploy script to create war file
  - name: "Deploy apollo"
    command: "./apollo deploy"
    become: yes
    args:
      chdir: "{{ apollo_home }}"

  # Rename the apollo war file to something cleaner
  - name: "Rename apollo war file"
    command: "mv apollo-{{ apollo_version }}-SNAPSHOT.war apollo.war"
    args:
      chdir: "{{ apollo_home }}/target/"

  # Remove the default webapp files so we never see the splash screen
  - name: "Remove default webapp files"
    file: path=/var/lib/tomcat7/webapps/ROOT state=absent

  # Copy files for tomcat (server.xml)
  # TODO: CHANGE LOCATION OF THE LOG FILES
  - name: "Copy server.xml to correct place"
    template: src=server.xml.j2 dest="{{ tomcat_config }}/server.xml" owner=tomcat7 mode=0600

  # Restart Tomcat
  - name: "Restart tomcat7"
    service: name=tomcat7 state=restarted
    become: yes

  # Add file to nginx folder to get tomcat and nginx to talk nicely
  - name: "Copy nginx config file"
    copy: src="apollo.locations" dest="{{ nginx_config }}/apollo.locations" mode=0600
    become: yes

  # Restart Nginx to apply changes
  - name: "restart nginx"
    service: name=nginx state=restarted
